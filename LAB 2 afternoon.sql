use sakila;

#LAB2 of the day
#1 List the number of films per category.
SELECT c.category_id, c.name AS category_name, COUNT(f.film_id) AS number_of_films
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id, c.name
ORDER BY number_of_films DESC;

#2 Retrieve the store ID, city, and country for each store.
SELECT s.store_id, a.city_id, country.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ON a.city_id = city.city_id
JOIN country ON city.country_id = country.country_id;

#3 Calculate the total revenue generated by each store in dollars.  
SELECT s.store_id, s.manager_staff_id, SUM(p.amount) AS total_revenue 
FROM store s
JOIN staff s2 ON s.manager_staff_id = s2.staff_id
JOIN address a ON s.address_id = a.address_id
JOIN customer c ON s.store_id = c.store_id
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY s.store_id, s.manager_staff_id, a.city_id
ORDER BY total_revenue DESC;

#4 Determine the average running time of films for each category.
SELECT c.category_id, c.name AS category_name, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id, c.name
ORDER BY average_running_time DESC;

#5 Identify the film categories with the longest average running time.
SELECT c.category_id, c.name AS category_name, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id, c.name
ORDER BY average_running_time DESC
LIMIT 5; 

#6 Display the top 10 most frequently rented movies in descending order.
SELECT f.film_id, f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
ORDER BY rental_count DESC
LIMIT 10;

#7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title AS movie_title, s.store_id,
CASE WHEN COUNT(r.rental_id) > 0 THEN 'Available'
ELSE 'Not Available' END AS rental_status
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN store s ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1
GROUP BY f.title, s.store_id;

#8 Provide a list of all distinct film titles, along with their availability status in the inventory.
# Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory,
# and this information can be obtained using a CASE statement combined with IFNULL."
SELECT f.title AS movie_title,
IFNULL(CASE WHEN COUNT(i.inventory_id) > 0 THEN 'Available' ELSE 'NOT available' END, 'NOT available') AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title;